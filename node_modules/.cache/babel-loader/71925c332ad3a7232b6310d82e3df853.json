{"ast":null,"code":"import _classCallCheck from \"/development/bigcats/pathforward-web/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/development/bigcats/pathforward-web/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport history from '../utils/history';\nimport auth0 from 'auth0-js';\nimport { AUTH_LOGIN_CONFIG } from './auth0-variables';\nimport { ROUTE_MY_PROFILE } from \"../components/auth/ProtectedRoutes\";\nimport { ROUTE_LOGIN } from \"../components/RootComponent\";\nvar SUCCESSFUL_AUTHENTICATION_URL = '/profile';\nvar UNSUCCESSFUL_AUTHENTICATION_URL = '/login';\nvar SUCCESSFUL_LOGOUT_URL = '/login';\nvar LOCAL_STORAGE_REDIRECT_PATH = \"login_redirect_path\";\nexport var LOCAL_STORAGE_ACCESS_TOKEN = \"access_token\";\nexport var LOCAL_STORAGE_ID_TOKEN = \"id_token\";\nexport var LOCAL_STORAGE_EXPIRES_AT = \"expires_at\";\n\nvar Auth =\n/*#__PURE__*/\nfunction () {\n  function Auth() {\n    _classCallCheck(this, Auth);\n\n    this.auth0 = new auth0.WebAuth(AUTH_LOGIN_CONFIG);\n    this.login = this.login.bind(this);\n    this.logout = this.logout.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n    this.isAuthenticated = this.isAuthenticated.bind(this);\n  }\n\n  _createClass(Auth, [{\n    key: \"login\",\n    value: function login(redirectPath) {\n      if (redirectPath) {\n        localStorage.setItem(LOCAL_STORAGE_REDIRECT_PATH, redirectPath);\n      }\n\n      this.auth0.authorize();\n    }\n  }, {\n    key: \"handleAuthentication\",\n    value: function handleAuthentication(callback) {\n      var _this = this;\n\n      this.auth0.parseHash(function (err, authResult) {\n        if (authResult && authResult.accessToken && authResult.idToken) {\n          _this.setSession(authResult);\n\n          var redirectPath = localStorage.getItem(LOCAL_STORAGE_REDIRECT_PATH);\n          localStorage.removeItem(LOCAL_STORAGE_REDIRECT_PATH);\n          history.replace(redirectPath || SUCCESSFUL_AUTHENTICATION_URL);\n          callback(authResult);\n        } else if (err) {\n          history.replace(UNSUCCESSFUL_AUTHENTICATION_URL);\n          console.log(err);\n          alert(\"Error: \".concat(err.error, \". Check the console for further details.\"));\n        }\n      });\n    }\n  }, {\n    key: \"setSession\",\n    value: function setSession(authResult) {\n      // Set the time that the access token will expire at\n      var expiresAt = JSON.stringify(authResult.expiresIn * 1000 + new Date().getTime());\n      localStorage.setItem(LOCAL_STORAGE_ACCESS_TOKEN, authResult.accessToken);\n      localStorage.setItem(LOCAL_STORAGE_ID_TOKEN, authResult.idToken);\n      localStorage.setItem(LOCAL_STORAGE_EXPIRES_AT, expiresAt);\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      // Clear access token and ID token from local storage\n      localStorage.removeItem(LOCAL_STORAGE_ACCESS_TOKEN);\n      localStorage.removeItem(LOCAL_STORAGE_ID_TOKEN);\n      localStorage.removeItem(LOCAL_STORAGE_EXPIRES_AT);\n      console.log(\"we're calling it - should navigate to\", SUCCESSFUL_LOGOUT_URL);\n      history.push(SUCCESSFUL_LOGOUT_URL);\n    }\n  }, {\n    key: \"isAuthenticated\",\n    value: function isAuthenticated() {\n      // Check whether the current time is past the\n      // access token's expiry time\n      var expiresAt = JSON.parse(localStorage.getItem(LOCAL_STORAGE_EXPIRES_AT));\n      return localStorage.getItem(LOCAL_STORAGE_ACCESS_TOKEN) && localStorage.getItem(LOCAL_STORAGE_ID_TOKEN) && new Date().getTime() < expiresAt;\n    }\n  }]);\n\n  return Auth;\n}();\n\nexport { Auth as default };","map":{"version":3,"sources":["/development/bigcats/pathforward-web/src/auth/UserAuth.js"],"names":["history","auth0","AUTH_LOGIN_CONFIG","ROUTE_MY_PROFILE","ROUTE_LOGIN","SUCCESSFUL_AUTHENTICATION_URL","UNSUCCESSFUL_AUTHENTICATION_URL","SUCCESSFUL_LOGOUT_URL","LOCAL_STORAGE_REDIRECT_PATH","LOCAL_STORAGE_ACCESS_TOKEN","LOCAL_STORAGE_ID_TOKEN","LOCAL_STORAGE_EXPIRES_AT","Auth","WebAuth","login","bind","logout","handleAuthentication","isAuthenticated","redirectPath","localStorage","setItem","authorize","callback","parseHash","err","authResult","accessToken","idToken","setSession","getItem","removeItem","replace","console","log","alert","error","expiresAt","JSON","stringify","expiresIn","Date","getTime","push","parse"],"mappings":";;AAAA,OAAOA,OAAP,MAAoB,kBAApB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAAQC,iBAAR,QAAgC,mBAAhC;AACA,SAAQC,gBAAR,QAA+B,oCAA/B;AACA,SAAQC,WAAR,QAA0B,6BAA1B;AAEA,IAAMC,6BAA6B,GAAG,UAAtC;AACA,IAAMC,+BAA+B,GAAG,QAAxC;AACA,IAAMC,qBAAqB,GAAG,QAA9B;AAEA,IAAMC,2BAA2B,GAAG,qBAApC;AACA,OAAO,IAAMC,0BAA0B,GAAG,cAAnC;AACP,OAAO,IAAMC,sBAAsB,GAAG,UAA/B;AACP,OAAO,IAAMC,wBAAwB,GAAG,YAAjC;;IAGcC,I;;;AAGjB,kBAAc;AAAA;;AAAA,SAFdX,KAEc,GAFN,IAAIA,KAAK,CAACY,OAAV,CAAkBX,iBAAlB,CAEM;AACV,SAAKY,KAAL,GAAa,KAAKA,KAAL,CAAWC,IAAX,CAAgB,IAAhB,CAAb;AACA,SAAKC,MAAL,GAAc,KAAKA,MAAL,CAAYD,IAAZ,CAAiB,IAAjB,CAAd;AACA,SAAKE,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BF,IAA1B,CAA+B,IAA/B,CAA5B;AACA,SAAKG,eAAL,GAAuB,KAAKA,eAAL,CAAqBH,IAArB,CAA0B,IAA1B,CAAvB;AACH;;;;0BAEKI,Y,EAAc;AAChB,UAAIA,YAAJ,EAAkB;AACdC,QAAAA,YAAY,CAACC,OAAb,CAAqBb,2BAArB,EAAkDW,YAAlD;AACH;;AACD,WAAKlB,KAAL,CAAWqB,SAAX;AACH;;;yCAEoBC,Q,EAAU;AAAA;;AAC3B,WAAKtB,KAAL,CAAWuB,SAAX,CAAqB,UAACC,GAAD,EAAMC,UAAN,EAAqB;AACtC,YAAIA,UAAU,IAAIA,UAAU,CAACC,WAAzB,IAAwCD,UAAU,CAACE,OAAvD,EAAgE;AAC5D,UAAA,KAAI,CAACC,UAAL,CAAgBH,UAAhB;;AACA,cAAMP,YAAY,GAAGC,YAAY,CAACU,OAAb,CAAqBtB,2BAArB,CAArB;AACAY,UAAAA,YAAY,CAACW,UAAb,CAAwBvB,2BAAxB;AACAR,UAAAA,OAAO,CAACgC,OAAR,CAAgBb,YAAY,IAAId,6BAAhC;AACAkB,UAAAA,QAAQ,CAACG,UAAD,CAAR;AACH,SAND,MAMO,IAAID,GAAJ,EAAS;AACZzB,UAAAA,OAAO,CAACgC,OAAR,CAAgB1B,+BAAhB;AACA2B,UAAAA,OAAO,CAACC,GAAR,CAAYT,GAAZ;AACAU,UAAAA,KAAK,kBAAWV,GAAG,CAACW,KAAf,8CAAL;AACH;AACJ,OAZD;AAaH;;;+BAEUV,U,EAAY;AACnB;AACA,UAAIW,SAAS,GAAGC,IAAI,CAACC,SAAL,CAAgBb,UAAU,CAACc,SAAX,GAAuB,IAAxB,GAAgC,IAAIC,IAAJ,GAAWC,OAAX,EAA/C,CAAhB;AACAtB,MAAAA,YAAY,CAACC,OAAb,CAAqBZ,0BAArB,EAAiDiB,UAAU,CAACC,WAA5D;AACAP,MAAAA,YAAY,CAACC,OAAb,CAAqBX,sBAArB,EAA6CgB,UAAU,CAACE,OAAxD;AACAR,MAAAA,YAAY,CAACC,OAAb,CAAqBV,wBAArB,EAA+C0B,SAA/C;AACH;;;6BAEQ;AACL;AACAjB,MAAAA,YAAY,CAACW,UAAb,CAAwBtB,0BAAxB;AACAW,MAAAA,YAAY,CAACW,UAAb,CAAwBrB,sBAAxB;AACAU,MAAAA,YAAY,CAACW,UAAb,CAAwBpB,wBAAxB;AACAsB,MAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ,EAAqD3B,qBAArD;AACAP,MAAAA,OAAO,CAAC2C,IAAR,CAAapC,qBAAb;AACH;;;sCAEiB;AACd;AACA;AACA,UAAI8B,SAAS,GAAGC,IAAI,CAACM,KAAL,CAAWxB,YAAY,CAACU,OAAb,CAAqBnB,wBAArB,CAAX,CAAhB;AACA,aAAOS,YAAY,CAACU,OAAb,CAAqBrB,0BAArB,KAAoDW,YAAY,CAACU,OAAb,CAAqBpB,sBAArB,CAApD,IAAoG,IAAI+B,IAAJ,GAAWC,OAAX,KAAuBL,SAAlI;AACH;;;;;;SAvDgBzB,I","sourcesContent":["import history from '../utils/history';\nimport auth0 from 'auth0-js';\nimport {AUTH_LOGIN_CONFIG} from './auth0-variables';\nimport {ROUTE_MY_PROFILE} from \"../components/auth/ProtectedRoutes\";\nimport {ROUTE_LOGIN} from \"../components/RootComponent\";\n\nconst SUCCESSFUL_AUTHENTICATION_URL = '/profile';\nconst UNSUCCESSFUL_AUTHENTICATION_URL = '/login';\nconst SUCCESSFUL_LOGOUT_URL = '/login';\n\nconst LOCAL_STORAGE_REDIRECT_PATH = \"login_redirect_path\";\nexport const LOCAL_STORAGE_ACCESS_TOKEN = \"access_token\";\nexport const LOCAL_STORAGE_ID_TOKEN = \"id_token\";\nexport const LOCAL_STORAGE_EXPIRES_AT = \"expires_at\";\n\n\nexport default class Auth {\n    auth0 = new auth0.WebAuth(AUTH_LOGIN_CONFIG);\n\n    constructor() {\n        this.login = this.login.bind(this);\n        this.logout = this.logout.bind(this);\n        this.handleAuthentication = this.handleAuthentication.bind(this);\n        this.isAuthenticated = this.isAuthenticated.bind(this);\n    }\n\n    login(redirectPath) {\n        if (redirectPath) {\n            localStorage.setItem(LOCAL_STORAGE_REDIRECT_PATH, redirectPath);\n        }\n        this.auth0.authorize();\n    }\n\n    handleAuthentication(callback) {\n        this.auth0.parseHash((err, authResult) => {\n            if (authResult && authResult.accessToken && authResult.idToken) {\n                this.setSession(authResult);\n                const redirectPath = localStorage.getItem(LOCAL_STORAGE_REDIRECT_PATH);\n                localStorage.removeItem(LOCAL_STORAGE_REDIRECT_PATH);\n                history.replace(redirectPath || SUCCESSFUL_AUTHENTICATION_URL);\n                callback(authResult);\n            } else if (err) {\n                history.replace(UNSUCCESSFUL_AUTHENTICATION_URL);\n                console.log(err);\n                alert(`Error: ${err.error}. Check the console for further details.`);\n            }\n        });\n    }\n\n    setSession(authResult) {\n        // Set the time that the access token will expire at\n        let expiresAt = JSON.stringify((authResult.expiresIn * 1000) + new Date().getTime());\n        localStorage.setItem(LOCAL_STORAGE_ACCESS_TOKEN, authResult.accessToken);\n        localStorage.setItem(LOCAL_STORAGE_ID_TOKEN, authResult.idToken);\n        localStorage.setItem(LOCAL_STORAGE_EXPIRES_AT, expiresAt);\n    }\n\n    logout() {\n        // Clear access token and ID token from local storage\n        localStorage.removeItem(LOCAL_STORAGE_ACCESS_TOKEN);\n        localStorage.removeItem(LOCAL_STORAGE_ID_TOKEN);\n        localStorage.removeItem(LOCAL_STORAGE_EXPIRES_AT);\n        console.log(\"we're calling it - should navigate to\", SUCCESSFUL_LOGOUT_URL);\n        history.push(SUCCESSFUL_LOGOUT_URL);\n    }\n\n    isAuthenticated() {\n        // Check whether the current time is past the\n        // access token's expiry time\n        let expiresAt = JSON.parse(localStorage.getItem(LOCAL_STORAGE_EXPIRES_AT));\n        return localStorage.getItem(LOCAL_STORAGE_ACCESS_TOKEN) && localStorage.getItem(LOCAL_STORAGE_ID_TOKEN) && new Date().getTime() < expiresAt;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}