{"ast":null,"code":"import _classCallCheck from \"/development/bigcats/pathforward-web/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/development/bigcats/pathforward-web/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/development/bigcats/pathforward-web/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/development/bigcats/pathforward-web/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/development/bigcats/pathforward-web/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/development/bigcats/pathforward-web/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/development/bigcats/pathforward-web/src/components/organization/AddOrganization.jsx\";\nimport React, { Component } from 'react';\nimport history from \"../../utils/history\";\nimport { Button, Input, Option, Panel, Select, Textarea } from \"muicss/react\";\nimport { ROUTE_MY_PROFILE } from \"../auth/ProtectedRoutes\";\nimport * as ORG from \"../../reducers/CreateOrganizationDataReducer\";\nimport PropTypes from \"prop-types\";\nimport LoadingSpinner from \"../common/LoadingSpinner\";\nvar PET_ORG_TYPES = [{\n  label: \"Animal Shelters\",\n  pin_type_id: 8\n}, {\n  label: \"Aquariums\",\n  pin_type_id: 9\n}, {\n  label: \"Aquarium Services\",\n  pin_type_id: 10\n}, {\n  label: \"Bird Shops\",\n  pin_type_id: 11\n}, {\n  label: \"Dog Walkers\",\n  pin_type_id: 12\n}, {\n  label: \"Pet Groomers\",\n  pin_type_id: 13\n}, {\n  label: \"Local Fish Stores\",\n  pin_type_id: 14\n}, {\n  label: \"Pet Sitting\",\n  pin_type_id: 15\n}, {\n  label: \"Pet Training\",\n  pin_type_id: 16\n}, {\n  label: \"Pet Adoption\",\n  pin_type_id: 17\n}, {\n  label: \"Pet Boarding\",\n  pin_type_id: 18\n}, {\n  label: \"Pet Hospice\",\n  pin_type_id: 19\n}, {\n  label: \"Pet Insurance\",\n  pin_type_id: 20\n}, {\n  label: \"Pet Photography\",\n  pin_type_id: 21\n}, {\n  label: \"Pet Services\",\n  pin_type_id: 23\n}, {\n  label: \"Pet Stores\",\n  pin_type_id: 24\n}, {\n  label: \"Pet Transportation\",\n  pin_type_id: 25\n}, {\n  label: \"Pet Waste Removal\",\n  pin_type_id: 26\n}, {\n  label: \"Veterinarians\",\n  pin_type_id: 27\n}];\nvar NON_PET_ORG_TYPES = [{\n  label: \"Restaurant\",\n  pin_type_id: 1001\n}, {\n  label: \"Shop\",\n  pin_type_id: 1002\n}, {\n  label: \"Service Provider\",\n  pin_type_id: 1003\n}, {\n  label: \"Other\",\n  pin_type_id: 1004\n}];\n\nvar AddOrganization =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AddOrganization, _Component);\n\n  function AddOrganization(props) {\n    var _this;\n\n    _classCallCheck(this, AddOrganization);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddOrganization).call(this, props));\n    _this.state = {\n      isPetRelated: true,\n      isValidOrgName: true,\n      isValidOrgDesc: true,\n      isValidOrgType: true,\n      isValidOrgAddress: true,\n      isValidCity: true,\n      isValidState: true,\n      isValidZip: true,\n      isValidCountry: true,\n      errors: []\n    };\n    _this.toggleIsPetRelated = _this.toggleIsPetRelated.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleCancel = _this.handleCancel.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.validateOrgName = _this.validateOrgName.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.validateOrgDesc = _this.validateOrgDesc.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.validatePinType = _this.validatePinType.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.validateAddress = _this.validateAddress.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.validateCity = _this.validateCity.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.validateState = _this.validateState.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.validateZip = _this.validateZip.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(AddOrganization, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      window.scrollTo(0, 0);\n    }\n  }, {\n    key: \"toggleIsPetRelated\",\n    value: function toggleIsPetRelated() {\n      var isPetRelated = this.state.isPetRelated;\n      this.setState({\n        isPetRelated: !isPetRelated\n      });\n    }\n  }, {\n    key: \"validateAllFields\",\n    value: function validateAllFields() {\n      var fieldsToValidate = [ORG.ORG_DATA_NAME, ORG.ORG_DATA_DESC, ORG.ORG_DATA_PIN_TYPE, ORG.ORG_DATA_ADDRESS_LINE_1, ORG.ORG_DATA_CITY, ORG.ORG_DATA_STATE, ORG.ORG_DATA_ZIP];\n      var renameFields = {\n        name: 'Organization Name',\n        desc: 'Description',\n        pinType: 'Organization Type',\n        addressLine1: 'Address',\n        city: 'City',\n        state: 'State',\n        zip: 'Zip'\n      };\n      var orgValidation = this.props.orgValidation;\n      var invalidFieldKeys = [];\n      console.log(orgValidation.get(ORG.ORG_DATA_PIN_TYPE));\n      console.log(orgValidation.get(ORG.ORG_DATA_NAME));\n      fieldsToValidate.forEach(function (fieldKey) {\n        if (!orgValidation.get(fieldKey)) {\n          invalidFieldKeys.push(renameFields[fieldKey]);\n        }\n      });\n      this.setState({\n        errors: invalidFieldKeys\n      });\n      return invalidFieldKeys;\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(e) {\n      e.preventDefault();\n      var invalidFieldKeys = this.validateAllFields();\n\n      if (invalidFieldKeys.length <= 0) {\n        var createNewOrg = this.props.createNewOrg;\n        createNewOrg();\n      } else {\n        invalidFieldKeys.forEach(function (fieldKeys) {\n          console.error(\"\".concat(fieldKeys, \" is invalid\"));\n        });\n        window.scrollTo(0, 0);\n      }\n    }\n  }, {\n    key: \"handleCancel\",\n    value: function handleCancel() {\n      history.push(ROUTE_MY_PROFILE);\n      var clearFormFields = this.props.clearFormFields;\n      clearFormFields();\n    }\n  }, {\n    key: \"validateOrgName\",\n    value: function validateOrgName() {\n      var _this$props = this.props,\n          setOrgValidationState = _this$props.setOrgValidationState,\n          orgName = _this$props.orgName;\n      setOrgValidationState(ORG.ORG_DATA_NAME, orgName.trim() !== '');\n    }\n  }, {\n    key: \"validateOrgDesc\",\n    value: function validateOrgDesc() {\n      var _this$props2 = this.props,\n          setOrgValidationState = _this$props2.setOrgValidationState,\n          orgDesc = _this$props2.orgDesc;\n      setOrgValidationState(ORG.ORG_DATA_DESC, orgDesc.trim() !== '');\n    }\n  }, {\n    key: \"validatePinType\",\n    value: function validatePinType(e) {\n      var _this$props3 = this.props,\n          setOrgValidationState = _this$props3.setOrgValidationState,\n          orgPinType = _this$props3.orgPinType;\n      var isValid = orgPinType && orgPinType.length > 0;\n\n      if (isValid) {\n        e.target.classList.remove(\"invalid\");\n      } else {\n        e.target.classList.add(\"invalid\");\n      }\n\n      setOrgValidationState(ORG.ORG_DATA_PIN_TYPE, isValid);\n    }\n  }, {\n    key: \"validateAddress\",\n    value: function validateAddress() {\n      var _this$props4 = this.props,\n          setOrgValidationState = _this$props4.setOrgValidationState,\n          orgAddressLine1 = _this$props4.orgAddressLine1;\n      setOrgValidationState(ORG.ORG_DATA_ADDRESS_LINE_1, orgAddressLine1.trim() !== '');\n    }\n  }, {\n    key: \"validateCity\",\n    value: function validateCity() {\n      var _this$props5 = this.props,\n          setOrgValidationState = _this$props5.setOrgValidationState,\n          orgCity = _this$props5.orgCity;\n      setOrgValidationState(ORG.ORG_DATA_CITY, orgCity.trim() !== '');\n    }\n  }, {\n    key: \"validateState\",\n    value: function validateState() {\n      var _this$props6 = this.props,\n          setOrgValidationState = _this$props6.setOrgValidationState,\n          setOrgState = _this$props6.setOrgState,\n          orgState = _this$props6.orgState;\n      setOrgValidationState(ORG.ORG_DATA_STATE, orgState.trim() !== '' && /^[a-zA-Z]/.test(orgState) && orgState.length === 2);\n    }\n  }, {\n    key: \"validateZip\",\n    value: function validateZip() {\n      var _this$props7 = this.props,\n          setOrgValidationState = _this$props7.setOrgValidationState,\n          orgZip = _this$props7.orgZip;\n      setOrgValidationState(ORG.ORG_DATA_ZIP, orgZip.trim() !== '' && /^[0-9]/.test(orgZip) && orgZip.length === 5);\n    }\n  }, {\n    key: \"validateCountry\",\n    value: function validateCountry() {\n      var _this$props8 = this.props,\n          setOrgValidationState = _this$props8.setOrgValidationState,\n          orgCountry = _this$props8.orgCountry;\n      setOrgValidationState(ORG.ORG_DATA_COUNTRY, orgCountry.trim() !== '');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isCreatingOrg = this.props.isCreatingOrg;\n      var _this$props9 = this.props,\n          orgName = _this$props9.orgName,\n          orgDesc = _this$props9.orgDesc,\n          orgPinType = _this$props9.orgPinType;\n      var _this$props10 = this.props,\n          setOrgName = _this$props10.setOrgName,\n          setOrgDesc = _this$props10.setOrgDesc,\n          setOrgPinType = _this$props10.setOrgPinType;\n      var _this$props11 = this.props,\n          orgAddressLine1 = _this$props11.orgAddressLine1,\n          orgAddressLine2 = _this$props11.orgAddressLine2,\n          orgCity = _this$props11.orgCity,\n          orgState = _this$props11.orgState,\n          orgZip = _this$props11.orgZip,\n          orgCountry = _this$props11.orgCountry;\n      var _this$props12 = this.props,\n          setOrgAddressLine1 = _this$props12.setOrgAddressLine1,\n          setOrgAddressLine2 = _this$props12.setOrgAddressLine2,\n          setOrgCity = _this$props12.setOrgCity,\n          setOrgState = _this$props12.setOrgState,\n          setOrgZip = _this$props12.setOrgZip,\n          setOrgCountry = _this$props12.setOrgCountry;\n      var _this$state = this.state,\n          isPetRelated = _this$state.isPetRelated,\n          errors = _this$state.errors;\n      var orgTypes = isPetRelated ? PET_ORG_TYPES : NON_PET_ORG_TYPES;\n      var errorsList = errors.map(function (error, index) {\n        return React.createElement(\"div\", {\n          key: index,\n          className: \"alert\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 191\n          },\n          __self: this\n        }, React.createElement(\"i\", {\n          class: \"material-icons\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 191\n          },\n          __self: this\n        }, \"error\"), \" Please enter a valid \", error);\n      });\n\n      if (isCreatingOrg) {\n        return React.createElement(LoadingSpinner, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 194\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, \" Register New Organization \"), errors && errors.length > 0 && errorsList, React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, React.createElement(Panel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, React.createElement(\"legend\", {\n        className: \"page-header-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, \"Basic Details\"), React.createElement(Input, {\n        placeholder: \"Organization Name\",\n        invalid: this.props.orgValidation.get(ORG.ORG_DATA_NAME) === false,\n        onBlur: this.validateOrgName,\n        onChange: setOrgName,\n        value: orgName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }), React.createElement(Textarea, {\n        placeholder: \"Description\",\n        invalid: this.props.orgValidation.get(ORG.ORG_DATA_DESC) === false,\n        onBlur: this.validateOrgDesc,\n        onChange: setOrgDesc,\n        value: orgDesc,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"switch-button-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, \"Pet-related Product or Services?\"), React.createElement(\"div\", {\n        className: \"switch\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, \"No\", React.createElement(\"input\", {\n        id: \"pet-related-switch\",\n        checked: isPetRelated,\n        type: \"checkbox\",\n        onChange: this.toggleIsPetRelated,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"lever\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }), \"Yes\"))), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, \"Pet-friendly?\"), React.createElement(\"div\", {\n        className: \"switch\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }, \"No\", React.createElement(\"input\", {\n        id: \"pet-friendly-switch\",\n        type: \"checkbox\",\n        defaultChecked: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"lever\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }), \"Yes\")))), React.createElement(Select, {\n        className: \"\",\n        value: orgPinType,\n        defaultValue: null,\n        placeholder: \"Organization Type...\",\n        onBlur: this.validatePinType,\n        onChange: setOrgPinType,\n        label: \"Select Organization Type\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, orgTypes.map(function (orgType) {\n        var key = orgType.label.replace(/ /g, \"_\").toLowerCase();\n        return React.createElement(Option, {\n          key: key,\n          value: orgType.pin_type_id,\n          label: orgType.label,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 238\n          },\n          __self: this\n        });\n      }))), React.createElement(Panel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }, React.createElement(\"legend\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }, \"Primary Address\"), React.createElement(Input, {\n        placeholder: \"Address Line 1\",\n        invalid: this.props.orgValidation.get(ORG.ORG_DATA_ADDRESS_LINE_1) === false,\n        onBlur: this.validateAddress,\n        value: orgAddressLine1,\n        onChange: setOrgAddressLine1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }), React.createElement(Input, {\n        placeholder: \"Address Line 2\",\n        value: orgAddressLine2,\n        onChange: setOrgAddressLine2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }), React.createElement(Input, {\n        placeholder: \"City\",\n        invalid: this.props.orgValidation.get(ORG.ORG_DATA_CITY) === false,\n        onBlur: this.validateCity,\n        value: orgCity,\n        onChange: setOrgCity,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }), React.createElement(Input, {\n        placeholder: \"State\",\n        invalid: this.props.orgValidation.get(ORG.ORG_DATA_STATE) === false,\n        onBlur: this.validateState,\n        value: orgState,\n        onChange: setOrgState,\n        maxlength: \"2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      }), React.createElement(Input, {\n        placeholder: \"Zip\",\n        invalid: this.props.orgValidation.get(ORG.ORG_DATA_ZIP) === false,\n        onBlur: this.validateZip,\n        value: orgZip,\n        onChange: setOrgZip,\n        maxlength: \"5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"default\",\n        onClick: this.handleCancel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }, \"Cancel\"), React.createElement(Button, {\n        color: \"primary\",\n        onClick: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }, \"Submit\"))));\n    }\n  }]);\n\n  return AddOrganization;\n}(Component);\n\nAddOrganization.displayName = \"AddOrganization\";\nAddOrganization.propsTypes = {\n  createNewOrg: PropTypes.func.isRequired,\n  clearFormFields: PropTypes.func.isRequired,\n  isCreatingOrg: PropTypes.bool.isRequired,\n  setOrgName: PropTypes.func.isRequired,\n  setOrgDesc: PropTypes.func.isRequired,\n  setOrgPinType: PropTypes.func.isRequired,\n  setOrgAddressLine1: PropTypes.func.isRequired,\n  setOrgAddressLine2: PropTypes.func.isRequired,\n  setOrgCity: PropTypes.func.isRequired,\n  setOrgState: PropTypes.func.isRequired,\n  setOrgZip: PropTypes.func.isRequired,\n  setOrgCountry: PropTypes.func.isRequired,\n  orgName: PropTypes.string.isRequired,\n  orgDesc: PropTypes.string.isRequired,\n  orgPinType: PropTypes.string.isRequired,\n  orgAddressLine1: PropTypes.string.isRequired,\n  orgAddressLine2: PropTypes.string.isRequired,\n  orgCity: PropTypes.string.isRequired,\n  orgState: PropTypes.string.isRequired,\n  orgZip: PropTypes.string.isRequired,\n  orgCountry: PropTypes.string.isRequired\n};\nexport default AddOrganization;","map":{"version":3,"sources":["/development/bigcats/pathforward-web/src/components/organization/AddOrganization.jsx"],"names":["React","Component","history","Button","Input","Option","Panel","Select","Textarea","ROUTE_MY_PROFILE","ORG","PropTypes","LoadingSpinner","PET_ORG_TYPES","label","pin_type_id","NON_PET_ORG_TYPES","AddOrganization","props","state","isPetRelated","isValidOrgName","isValidOrgDesc","isValidOrgType","isValidOrgAddress","isValidCity","isValidState","isValidZip","isValidCountry","errors","toggleIsPetRelated","bind","handleSubmit","handleCancel","validateOrgName","validateOrgDesc","validatePinType","validateAddress","validateCity","validateState","validateZip","window","scrollTo","setState","fieldsToValidate","ORG_DATA_NAME","ORG_DATA_DESC","ORG_DATA_PIN_TYPE","ORG_DATA_ADDRESS_LINE_1","ORG_DATA_CITY","ORG_DATA_STATE","ORG_DATA_ZIP","renameFields","name","desc","pinType","addressLine1","city","zip","orgValidation","invalidFieldKeys","console","log","get","forEach","fieldKey","push","e","preventDefault","validateAllFields","length","createNewOrg","fieldKeys","error","clearFormFields","setOrgValidationState","orgName","trim","orgDesc","orgPinType","isValid","target","classList","remove","add","orgAddressLine1","orgCity","setOrgState","orgState","test","orgZip","orgCountry","ORG_DATA_COUNTRY","isCreatingOrg","setOrgName","setOrgDesc","setOrgPinType","orgAddressLine2","setOrgAddressLine1","setOrgAddressLine2","setOrgCity","setOrgZip","setOrgCountry","orgTypes","errorsList","map","index","orgType","key","replace","toLowerCase","displayName","propsTypes","func","isRequired","bool","string"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport history from \"../../utils/history\";\nimport {Button, Input, Option, Panel, Select, Textarea} from \"muicss/react\";\nimport {ROUTE_MY_PROFILE} from \"../auth/ProtectedRoutes\";\nimport * as ORG from \"../../reducers/CreateOrganizationDataReducer\";\nimport PropTypes from \"prop-types\";\nimport LoadingSpinner from \"../common/LoadingSpinner\";\n\nconst PET_ORG_TYPES = [\n    {label: \"Animal Shelters\", pin_type_id: 8},\n    {label: \"Aquariums\", pin_type_id: 9},\n    {label: \"Aquarium Services\", pin_type_id: 10},\n    {label: \"Bird Shops\", pin_type_id: 11},\n    {label: \"Dog Walkers\", pin_type_id: 12},\n    {label: \"Pet Groomers\", pin_type_id: 13},\n    {label: \"Local Fish Stores\", pin_type_id: 14},\n    {label: \"Pet Sitting\", pin_type_id: 15},\n    {label: \"Pet Training\", pin_type_id: 16},\n    {label: \"Pet Adoption\", pin_type_id: 17},\n    {label: \"Pet Boarding\", pin_type_id: 18},\n    {label: \"Pet Hospice\", pin_type_id: 19},\n    {label: \"Pet Insurance\", pin_type_id: 20},\n    {label: \"Pet Photography\", pin_type_id: 21},\n    {label: \"Pet Services\", pin_type_id: 23},\n    {label: \"Pet Stores\", pin_type_id: 24},\n    {label: \"Pet Transportation\", pin_type_id: 25},\n    {label: \"Pet Waste Removal\", pin_type_id: 26},\n    {label: \"Veterinarians\", pin_type_id: 27}\n];\n\nconst NON_PET_ORG_TYPES = [\n    {label: \"Restaurant\", pin_type_id: 1001},\n    {label: \"Shop\", pin_type_id: 1002},\n    {label: \"Service Provider\", pin_type_id: 1003},\n    {label: \"Other\", pin_type_id: 1004}\n];\n\nclass AddOrganization extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isPetRelated: true,\n            isValidOrgName: true,\n            isValidOrgDesc: true,\n            isValidOrgType: true,\n            isValidOrgAddress: true,\n            isValidCity: true,\n            isValidState: true,\n            isValidZip: true,\n            isValidCountry: true,\n            errors: []\n        };\n        this.toggleIsPetRelated = this.toggleIsPetRelated.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleCancel = this.handleCancel.bind(this);\n        this.validateOrgName = this.validateOrgName.bind(this);\n        this.validateOrgDesc = this.validateOrgDesc.bind(this);\n        this.validatePinType = this.validatePinType.bind(this);\n        this.validateAddress = this.validateAddress.bind(this);\n        this.validateCity = this.validateCity.bind(this);\n        this.validateState = this.validateState.bind(this);\n        this.validateZip = this.validateZip.bind(this);\n    }\n\n    componentDidMount() {\n        window.scrollTo(0, 0);\n    }\n\n\n    toggleIsPetRelated() {\n        const {isPetRelated} = this.state;\n        this.setState({isPetRelated: !isPetRelated});\n    }\n\n    validateAllFields() {\n        const fieldsToValidate = [\n            ORG.ORG_DATA_NAME,\n            ORG.ORG_DATA_DESC,\n            ORG.ORG_DATA_PIN_TYPE,\n            ORG.ORG_DATA_ADDRESS_LINE_1,\n            ORG.ORG_DATA_CITY,\n            ORG.ORG_DATA_STATE,\n            ORG.ORG_DATA_ZIP\n        ];\n\n        const renameFields = {\n            name: 'Organization Name',\n            desc: 'Description',\n            pinType: 'Organization Type',\n            addressLine1: 'Address',\n            city: 'City',\n            state: 'State',\n            zip: 'Zip'\n        }\n\n        const {orgValidation} = this.props;\n\n        const invalidFieldKeys = [];\n\n        console.log(orgValidation.get(ORG.ORG_DATA_PIN_TYPE));\n        console.log(orgValidation.get(ORG.ORG_DATA_NAME));\n\n        fieldsToValidate.forEach(fieldKey => {\n            if (!orgValidation.get(fieldKey)) {\n                invalidFieldKeys.push(renameFields[fieldKey]);\n            }\n        });\n\n        this.setState({errors: invalidFieldKeys});\n        return invalidFieldKeys;\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n\n        const invalidFieldKeys = this.validateAllFields();\n        if (invalidFieldKeys.length <= 0) {\n            const {createNewOrg} = this.props;\n            createNewOrg();\n        } else {\n            invalidFieldKeys.forEach(fieldKeys => {\n                console.error(`${fieldKeys} is invalid`);\n            });\n            window.scrollTo(0, 0);\n        }\n    }\n\n    handleCancel() {\n        history.push(ROUTE_MY_PROFILE);\n        const {clearFormFields} = this.props;\n        clearFormFields();\n    }\n\n    validateOrgName() {\n        const {setOrgValidationState, orgName} = this.props;\n        setOrgValidationState(ORG.ORG_DATA_NAME, orgName.trim() !== '');\n    }\n\n    validateOrgDesc(){\n        const {setOrgValidationState, orgDesc} = this.props;\n        setOrgValidationState(ORG.ORG_DATA_DESC, orgDesc.trim() !== '');\n    }\n\n    validatePinType(e){\n        const {setOrgValidationState, orgPinType} = this.props;\n        const isValid = orgPinType && orgPinType.length > 0;\n        if (isValid){\n            e.target.classList.remove(\"invalid\");\n        }\n        else {\n            e.target.classList.add(\"invalid\");\n        }\n\n        setOrgValidationState(ORG.ORG_DATA_PIN_TYPE, isValid);\n    }\n\n    validateAddress(){\n        const {setOrgValidationState, orgAddressLine1} = this.props;\n        setOrgValidationState(ORG.ORG_DATA_ADDRESS_LINE_1, orgAddressLine1.trim() !== '');\n    }\n\n    validateCity(){\n        const {setOrgValidationState, orgCity} = this.props;\n        setOrgValidationState(ORG.ORG_DATA_CITY, orgCity.trim() !== '');\n    }\n\n    validateState(){\n        const {setOrgValidationState, setOrgState, orgState} = this.props;\n        setOrgValidationState(ORG.ORG_DATA_STATE, orgState.trim() !== '' && /^[a-zA-Z]/.test(orgState) && orgState.length === 2);\n    }\n\n    validateZip(){\n        const {setOrgValidationState, orgZip} = this.props;\n        setOrgValidationState(ORG.ORG_DATA_ZIP, orgZip.trim() !== '' && /^[0-9]/.test(orgZip) && orgZip.length === 5);\n    }\n\n    validateCountry(){\n        const {setOrgValidationState, orgCountry} = this.props;\n        setOrgValidationState(ORG.ORG_DATA_COUNTRY, orgCountry.trim() !== '');\n    }\n\n    render() {\n        const {isCreatingOrg} = this.props;\n        const {orgName, orgDesc, orgPinType} = this.props;\n        const {setOrgName, setOrgDesc, setOrgPinType} = this.props;\n        const {orgAddressLine1, orgAddressLine2, orgCity, orgState, orgZip, orgCountry} = this.props;\n        const {setOrgAddressLine1, setOrgAddressLine2, setOrgCity, setOrgState, setOrgZip, setOrgCountry} = this.props;\n\n        const {isPetRelated, errors} = this.state;\n        const orgTypes = isPetRelated ? PET_ORG_TYPES : NON_PET_ORG_TYPES;\n        const errorsList = errors.map((error, index) => <div key={index} className=\"alert\"><i class=\"material-icons\">error</i> Please enter a valid {error}</div>);\n\n        if (isCreatingOrg) {\n            return <LoadingSpinner/>;\n        }\n\n        return (\n            <div>\n                <h1> Register New Organization </h1>\n                {\n                    errors && errors.length > 0 &&\n                    errorsList\n                }\n                <form>\n                    <Panel>\n                        <legend className=\"page-header-text\">Basic Details</legend>\n                        <Input placeholder=\"Organization Name\" invalid={this.props.orgValidation.get(ORG.ORG_DATA_NAME) === false} onBlur={this.validateOrgName} onChange={setOrgName} value={orgName}/>\n                        <Textarea placeholder=\"Description\" invalid={this.props.orgValidation.get(ORG.ORG_DATA_DESC) === false} onBlur={this.validateOrgDesc} onChange={setOrgDesc} value={orgDesc}/>\n\n                        <div>\n                            <div className=\"switch-button-group\">\n                                <label>Pet-related Product or Services?</label>\n                                <div className=\"switch\">\n                                    <label>\n                                        No\n                                        <input id=\"pet-related-switch\" checked={isPetRelated} type=\"checkbox\" onChange={this.toggleIsPetRelated}/>\n                                        <span className=\"lever\"/>\n                                        Yes\n                                    </label>\n                                </div>\n                            </div>\n                            <div>\n                                <label>Pet-friendly?</label>\n                                <div className=\"switch\">\n                                    <label>\n                                        No\n                                        <input id=\"pet-friendly-switch\" type=\"checkbox\" defaultChecked={true}/>\n                                        <span className=\"lever\"/>\n                                        Yes\n                                    </label>\n                                </div>\n                            </div>\n                        </div>\n\n                        <Select className=\"\" value={orgPinType} defaultValue={null} placeholder=\"Organization Type...\" onBlur={this.validatePinType} onChange={setOrgPinType} label=\"Select Organization Type\">\n                            {orgTypes.map((orgType) => {\n                                const key = orgType.label.replace(/ /g,\"_\").toLowerCase();\n                                return <Option key={key} value={orgType.pin_type_id} label={orgType.label} />\n                            })}\n                        </Select>\n                    </Panel>\n\n                    <Panel>\n                        <legend>Primary Address</legend>\n                        <Input placeholder=\"Address Line 1\" invalid={this.props.orgValidation.get(ORG.ORG_DATA_ADDRESS_LINE_1) === false} onBlur={this.validateAddress} value={orgAddressLine1} onChange={setOrgAddressLine1}/>\n                        <Input placeholder=\"Address Line 2\" value={orgAddressLine2} onChange={setOrgAddressLine2}/>\n                        <Input placeholder=\"City\" invalid={this.props.orgValidation.get(ORG.ORG_DATA_CITY) === false} onBlur={this.validateCity} value={orgCity} onChange={setOrgCity}/>\n                        <Input placeholder=\"State\" invalid={this.props.orgValidation.get(ORG.ORG_DATA_STATE) === false} onBlur={this.validateState} value={orgState} onChange={setOrgState} maxlength=\"2\"/>\n                        <Input placeholder=\"Zip\" invalid={this.props.orgValidation.get(ORG.ORG_DATA_ZIP) === false} onBlur={this.validateZip} value={orgZip} onChange={setOrgZip} maxlength=\"5\"/>\n                    {/*<Input placeholder=\"Country\" invalid={this.props.orgValidation.get(ORG.ORG_DATA_COUNTRY) === false} onBlur={this.validateCountry} value={orgCountry} onChange={setOrgCountry}/>*/}\n                    </Panel>\n                    <div>\n                        <Button color=\"default\" onClick={this.handleCancel}>Cancel</Button>\n                        <Button color=\"primary\" onClick={this.handleSubmit}>Submit</Button>\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}\n\nAddOrganization.displayName = \"AddOrganization\";\n\nAddOrganization.propsTypes = {\n    createNewOrg: PropTypes.func.isRequired,\n    clearFormFields: PropTypes.func.isRequired,\n    isCreatingOrg: PropTypes.bool.isRequired,\n    setOrgName: PropTypes.func.isRequired,\n    setOrgDesc: PropTypes.func.isRequired,\n    setOrgPinType: PropTypes.func.isRequired,\n    setOrgAddressLine1: PropTypes.func.isRequired,\n    setOrgAddressLine2: PropTypes.func.isRequired,\n    setOrgCity: PropTypes.func.isRequired,\n    setOrgState: PropTypes.func.isRequired,\n    setOrgZip: PropTypes.func.isRequired,\n    setOrgCountry: PropTypes.func.isRequired,\n    orgName: PropTypes.string.isRequired,\n    orgDesc: PropTypes.string.isRequired,\n    orgPinType: PropTypes.string.isRequired,\n    orgAddressLine1: PropTypes.string.isRequired,\n    orgAddressLine2: PropTypes.string.isRequired,\n    orgCity: PropTypes.string.isRequired,\n    orgState: PropTypes.string.isRequired,\n    orgZip: PropTypes.string.isRequired,\n    orgCountry: PropTypes.string.isRequired\n};\n\nexport default AddOrganization;\n"]},"metadata":{},"sourceType":"module"}