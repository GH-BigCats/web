{"ast":null,"code":"import { SET_MY_PROFILE_DATA } from \"../reducers/MyProfileDataReducer\";\nimport { LOCAL_STORAGE_ACCESS_TOKEN } from \"../auth/UserAuth\";\nimport { SET_MY_ORGS } from \"../reducers/MyOrgsReducer\";\nimport { getUserEndpoint, getOrgEndpoint } from \"../utils/endpoints\";\nimport { SET_ORG_DETAILS } from \"../reducers/OrgDetailReducer\";\nimport { ORG_DATA_NAME, ORG_DATA_DESC, ORG_DATA_PIN_TYPE, ORG_DATA_ADDRESS_LINE_1, ORG_DATA_CITY, ORG_DATA_COUNTRY, ORG_DATA_ZIP, ORG_DATA_STATE, ORG_DATA_ADDRESS_LINE_2, CLEAR_CREATE_ORGANIZATION_FIELDS } from \"../reducers/CreateOrganizationDataReducer\";\nimport { API_STATUS_FAILED, API_STATUS_IN_PROGRESS, API_STATUS_SUCCESS, SET_CREATE_ORG_API_STATUS, SET_CREATE_ORG_IS_IN_PROGRESS } from \"../reducers/CreateOrgApiStatus\";\nimport { ROUTE_MY_PROFILE, ROUTE_ORGANIZATION } from \"../components/auth/ProtectedRoutes\";\nimport history from \"../utils/history\";\nimport { SET_ORG_LOCATIONS } from \"../reducers/OrgLocationsReducer\";\n\nvar superagent = require('superagent');\n\nexport var getMyProfileData = function getMyProfileData(dispatch) {\n  superagent.get(getUserEndpoint).set('Authorization', \"Bearer \".concat(localStorage.getItem(LOCAL_STORAGE_ACCESS_TOKEN))).set('Accept', 'application/json').end(function (err, res) {\n    if (err) {\n      return console.error(err);\n    }\n\n    dispatch({\n      type: SET_MY_PROFILE_DATA,\n      data: res.body\n    });\n  });\n};\nexport var getMyOrgs = function getMyOrgs(dispatch) {\n  superagent.get(getOrgEndpoint).set('Authorization', \"Bearer \".concat(localStorage.getItem(LOCAL_STORAGE_ACCESS_TOKEN))).set('Accept', 'application/json').end(function (err, res) {\n    if (err) {\n      return console.error(err);\n    }\n\n    dispatch({\n      type: SET_MY_ORGS,\n      orgs: res.body\n    });\n  });\n};\nexport var getOrgDetails = function getOrgDetails(orgId) {\n  return function (dispatch) {\n    if (!orgId) {\n      return dispatch({\n        type: SET_ORG_DETAILS,\n        details: {}\n      });\n    }\n\n    dispatch({\n      type: SET_ORG_DETAILS,\n      details: null\n    });\n    superagent.get(\"\".concat(getOrgEndpoint, \"/\").concat(orgId)).set('Authorization', \"Bearer \".concat(localStorage.getItem(LOCAL_STORAGE_ACCESS_TOKEN))).set('Accept', 'application/json').end(function (err, res) {\n      if (err) {\n        dispatch({\n          type: SET_ORG_DETAILS,\n          details: {}\n        });\n        return console.error(err);\n      }\n\n      dispatch({\n        type: SET_ORG_DETAILS,\n        details: res.body\n      });\n    });\n  };\n};\nexport var fetchOrgLocations = function fetchOrgLocations(orgId) {\n  return function (dispatch) {\n    if (!orgId) {\n      return dispatch({\n        type: SET_ORG_LOCATIONS,\n        locations: []\n      });\n    }\n\n    dispatch({\n      type: SET_ORG_LOCATIONS,\n      locations: null\n    });\n    superagent.get(\"\".concat(getOrgEndpoint, \"/\").concat(orgId, \"/location\")).set('Authorization', \"Bearer \".concat(localStorage.getItem(LOCAL_STORAGE_ACCESS_TOKEN))).set('Accept', 'application/json').end(function (err, res) {\n      if (err) {\n        dispatch({\n          type: SET_ORG_LOCATIONS,\n          details: []\n        });\n        return console.error(err);\n      }\n\n      dispatch({\n        type: SET_ORG_LOCATIONS,\n        locations: res.body\n      });\n    });\n  };\n};\n\nvar doPostNewOrganizationLocation = function doPostNewOrganizationLocation(orgId) {\n  return function (dispatch, getState) {\n    var _getState = getState(),\n        createOrgData = _getState.createOrgData;\n\n    superagent.post(\"\".concat(getOrgEndpoint, \"/\").concat(orgId, \"/location\")).set('Authorization', \"Bearer \".concat(localStorage.getItem(LOCAL_STORAGE_ACCESS_TOKEN))).set('Accept', 'application/json').send({\n      \"address_1\": createOrgData.get(ORG_DATA_ADDRESS_LINE_1),\n      \"address_2\": createOrgData.get(ORG_DATA_ADDRESS_LINE_2),\n      \"city\": createOrgData.get(ORG_DATA_CITY),\n      \"state\": createOrgData.get(ORG_DATA_STATE),\n      \"zip\": createOrgData.get(ORG_DATA_ZIP),\n      \"county\": createOrgData.get(ORG_DATA_COUNTRY)\n    }).end(function (err, res) {\n      dispatch({\n        type: CLEAR_CREATE_ORGANIZATION_FIELDS\n      });\n\n      if (err) {\n        dispatch({\n          type: SET_CREATE_ORG_API_STATUS,\n          status: API_STATUS_FAILED,\n          message: err\n        });\n        return console.error(err);\n      }\n\n      dispatch({\n        type: SET_CREATE_ORG_API_STATUS,\n        status: API_STATUS_SUCCESS\n      });\n      history.push(\"\".concat(ROUTE_ORGANIZATION, \"/\").concat(orgId));\n    });\n  };\n};\n\nexport var doPostNewOrganization = function doPostNewOrganization(dispatch, getState) {\n  dispatch({\n    type: SET_CREATE_ORG_API_STATUS,\n    status: API_STATUS_IN_PROGRESS\n  });\n\n  var _getState2 = getState(),\n      createOrgData = _getState2.createOrgData;\n\n  superagent.post(getOrgEndpoint).set('Authorization', \"Bearer \".concat(localStorage.getItem(LOCAL_STORAGE_ACCESS_TOKEN))).set('Accept', 'application/json').send({\n    \"name\": createOrgData.get(ORG_DATA_NAME),\n    \"description\": createOrgData.get(ORG_DATA_DESC),\n    \"pin_type_id\": createOrgData.get(ORG_DATA_PIN_TYPE)\n  }).end(function (err, res) {\n    if (err) {\n      dispatch({\n        type: SET_CREATE_ORG_API_STATUS,\n        status: API_STATUS_FAILED,\n        message: err\n      });\n      return console.error(err);\n    }\n\n    dispatch(doPostNewOrganizationLocation(res.body.id));\n  });\n};","map":{"version":3,"sources":["/development/bigcats/pathforward-web/src/actions/profileApi.js"],"names":["SET_MY_PROFILE_DATA","LOCAL_STORAGE_ACCESS_TOKEN","SET_MY_ORGS","getUserEndpoint","getOrgEndpoint","SET_ORG_DETAILS","ORG_DATA_NAME","ORG_DATA_DESC","ORG_DATA_PIN_TYPE","ORG_DATA_ADDRESS_LINE_1","ORG_DATA_CITY","ORG_DATA_COUNTRY","ORG_DATA_ZIP","ORG_DATA_STATE","ORG_DATA_ADDRESS_LINE_2","CLEAR_CREATE_ORGANIZATION_FIELDS","API_STATUS_FAILED","API_STATUS_IN_PROGRESS","API_STATUS_SUCCESS","SET_CREATE_ORG_API_STATUS","SET_CREATE_ORG_IS_IN_PROGRESS","ROUTE_MY_PROFILE","ROUTE_ORGANIZATION","history","SET_ORG_LOCATIONS","superagent","require","getMyProfileData","dispatch","get","set","localStorage","getItem","end","err","res","console","error","type","data","body","getMyOrgs","orgs","getOrgDetails","orgId","details","fetchOrgLocations","locations","doPostNewOrganizationLocation","getState","createOrgData","post","send","status","message","push","doPostNewOrganization","id"],"mappings":"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","sourcesContent":["import {SET_MY_PROFILE_DATA} from \"../reducers/MyProfileDataReducer\";\nimport {LOCAL_STORAGE_ACCESS_TOKEN} from \"../auth/UserAuth\";\nimport {SET_MY_ORGS} from \"../reducers/MyOrgsReducer\";\nimport {getUserEndpoint, getOrgEndpoint} from \"../utils/endpoints\";\nimport {SET_ORG_DETAILS} from \"../reducers/OrgDetailReducer\";\nimport {\n    ORG_DATA_NAME, ORG_DATA_DESC, ORG_DATA_PIN_TYPE,\n    ORG_DATA_ADDRESS_LINE_1, ORG_DATA_CITY, ORG_DATA_COUNTRY, ORG_DATA_ZIP, ORG_DATA_STATE, ORG_DATA_ADDRESS_LINE_2,\n    CLEAR_CREATE_ORGANIZATION_FIELDS\n} from \"../reducers/CreateOrganizationDataReducer\";\nimport {\n    API_STATUS_FAILED,\n    API_STATUS_IN_PROGRESS, API_STATUS_SUCCESS, SET_CREATE_ORG_API_STATUS,\n    SET_CREATE_ORG_IS_IN_PROGRESS\n} from \"../reducers/CreateOrgApiStatus\";\nimport {ROUTE_MY_PROFILE, ROUTE_ORGANIZATION} from \"../components/auth/ProtectedRoutes\";\nimport history from \"../utils/history\";\nimport {SET_ORG_LOCATIONS} from \"../reducers/OrgLocationsReducer\";\n\nconst superagent = require('superagent');\n\nexport const getMyProfileData = (dispatch) => {\n    superagent.get(getUserEndpoint)\n        .set('Authorization', `Bearer ${localStorage.getItem(LOCAL_STORAGE_ACCESS_TOKEN)}`)\n        .set('Accept', 'application/json')\n        .end((err, res) => {\n            if (err) {\n                return console.error(err);\n            }\n            dispatch({type: SET_MY_PROFILE_DATA, data: res.body});\n        });\n};\n\nexport const getMyOrgs = (dispatch) => {\n    superagent.get(getOrgEndpoint)\n        .set('Authorization', `Bearer ${localStorage.getItem(LOCAL_STORAGE_ACCESS_TOKEN)}`)\n        .set('Accept', 'application/json')\n        .end((err, res) => {\n            if (err) {\n                return console.error(err);\n            }\n            dispatch({type: SET_MY_ORGS, orgs: res.body});\n        });\n};\n\n\nexport const getOrgDetails = (orgId) => (dispatch) => {\n    if (!orgId) {\n        return dispatch({type: SET_ORG_DETAILS, details: {}});\n    }\n    dispatch({type: SET_ORG_DETAILS, details: null});\n    superagent.get(`${getOrgEndpoint}/${orgId}`)\n        .set('Authorization', `Bearer ${localStorage.getItem(LOCAL_STORAGE_ACCESS_TOKEN)}`)\n        .set('Accept', 'application/json')\n        .end((err, res) => {\n            if (err) {\n                dispatch({type: SET_ORG_DETAILS, details: {}});\n                return console.error(err);\n            }\n            dispatch({type: SET_ORG_DETAILS, details: res.body});\n        });\n};\n\n\nexport const fetchOrgLocations = (orgId) => (dispatch) => {\n    if (!orgId) {\n        return dispatch({type: SET_ORG_LOCATIONS, locations: []});\n    }\n    dispatch({type: SET_ORG_LOCATIONS, locations: null});\n    superagent.get(`${getOrgEndpoint}/${orgId}/location`)\n        .set('Authorization', `Bearer ${localStorage.getItem(LOCAL_STORAGE_ACCESS_TOKEN)}`)\n        .set('Accept', 'application/json')\n        .end((err, res) => {\n            if (err) {\n                dispatch({type: SET_ORG_LOCATIONS, details: []});\n                return console.error(err);\n            }\n            dispatch({type: SET_ORG_LOCATIONS, locations: res.body});\n        });\n};\n\nconst doPostNewOrganizationLocation = (orgId) => (dispatch, getState) => {\n    const {createOrgData} = getState();\n    superagent.post(`${getOrgEndpoint}/${orgId}/location`)\n        .set('Authorization', `Bearer ${localStorage.getItem(LOCAL_STORAGE_ACCESS_TOKEN)}`)\n        .set('Accept', 'application/json')\n        .send(\n            {\n                \"address_1\": createOrgData.get(ORG_DATA_ADDRESS_LINE_1),\n                \"address_2\": createOrgData.get(ORG_DATA_ADDRESS_LINE_2),\n                \"city\": createOrgData.get(ORG_DATA_CITY),\n                \"state\": createOrgData.get(ORG_DATA_STATE),\n                \"zip\": createOrgData.get(ORG_DATA_ZIP),\n                \"county\": createOrgData.get(ORG_DATA_COUNTRY)\n            }\n        )\n        .end((err, res) => {\n            dispatch({type: CLEAR_CREATE_ORGANIZATION_FIELDS});\n            if (err) {\n                dispatch({type: SET_CREATE_ORG_API_STATUS, status: API_STATUS_FAILED, message: err});\n                return console.error(err);\n            }\n            dispatch({type: SET_CREATE_ORG_API_STATUS, status: API_STATUS_SUCCESS});\n            history.push(`${ROUTE_ORGANIZATION}/${orgId}`);\n        });\n};\n\nexport const doPostNewOrganization = (dispatch, getState) => {\n    dispatch({type: SET_CREATE_ORG_API_STATUS, status: API_STATUS_IN_PROGRESS});\n    const {createOrgData} = getState();\n    superagent.post(getOrgEndpoint)\n        .set('Authorization', `Bearer ${localStorage.getItem(LOCAL_STORAGE_ACCESS_TOKEN)}`)\n        .set('Accept', 'application/json')\n        .send(\n            {\n                \"name\": createOrgData.get(ORG_DATA_NAME),\n                \"description\": createOrgData.get(ORG_DATA_DESC),\n                \"pin_type_id\": createOrgData.get(ORG_DATA_PIN_TYPE)\n            }\n        )\n        .end((err, res) => {\n            if (err) {\n                dispatch({type: SET_CREATE_ORG_API_STATUS, status: API_STATUS_FAILED, message: err});\n                return console.error(err);\n            }\n\n            dispatch(doPostNewOrganizationLocation(res.body.id));\n        });\n};\n"]},"metadata":{},"sourceType":"module"}