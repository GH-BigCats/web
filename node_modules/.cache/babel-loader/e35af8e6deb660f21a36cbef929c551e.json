{"ast":null,"code":"import _classCallCheck from \"/development/bigcats/pathforward-web/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/development/bigcats/pathforward-web/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/development/bigcats/pathforward-web/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/development/bigcats/pathforward-web/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/development/bigcats/pathforward-web/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/development/bigcats/pathforward-web/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/development/bigcats/pathforward-web/src/components/profile/MyProfile.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport banner from '../../imgs/homePageBanner.png';\nimport ProfileImage from \"./ProfileImage\";\nimport OrganizationButton from \"./OrganizationButton\";\nimport { Button, Divider } from \"muicss/react\";\nimport PetProfileImage from \"./PetProfileImage\";\nimport LoadingSpinner from \"../common/LoadingSpinner\";\nimport history from \"../../utils/history\";\nimport { ROUTE_ORGANIZATION } from \"../auth/ProtectedRoutes\";\nimport loading from \"../../imgs/loading.svg\"; // TODO - hook this up to api once we have pet profiles\n\nvar MY_PETS = [{\n  id: 123\n}, {\n  id: 321\n}]; // TODO - hook this up to api to get organizations\n\nvar MY_ORGS = [{\n  id: 123\n}];\n\nvar MyProfile =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MyProfile, _Component);\n\n  function MyProfile(props) {\n    var _this;\n\n    _classCallCheck(this, MyProfile);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MyProfile).call(this, props));\n    var fetchUserData = props.fetchUserData,\n        fetchUserOrgs = props.fetchUserOrgs;\n    fetchUserData();\n    fetchUserOrgs(); //TODO - get auth0 user info on load if we no longer have it in redux store\n\n    _this.handleProfileImageClick = _this.handleProfileImageClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleAddOrgBtnClick = _this.handleAddOrgBtnClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleAddPetBtnClick = _this.handleAddPetBtnClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(MyProfile, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      window.scrollTo(0, 0);\n    }\n  }, {\n    key: \"handleProfileImageClick\",\n    value: function handleProfileImageClick() {// TODO - edit profile image?\n    }\n  }, {\n    key: \"handleAddOrgBtnClick\",\n    value: function handleAddOrgBtnClick() {\n      history.push(ROUTE_ORGANIZATION);\n    }\n  }, {\n    key: \"handleAddPetBtnClick\",\n    value: function handleAddPetBtnClick() {// TODO - link to pet profile creation\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          myUsername = _this$props.myUsername,\n          myProfileImageUrl = _this$props.myProfileImageUrl,\n          myPoints = _this$props.myPoints,\n          myOrgs = _this$props.myOrgs;\n\n      if (!myUsername || !myPoints && myPoints !== 0) {\n        // TODO - implement loading spinner\n        return React.createElement(LoadingSpinner, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        className: \"MyProfile-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: banner,\n        className: \"home-banner\",\n        alt: \"logo\",\n        onClick: this.handleProfileImageClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"profile-image-button-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(ProfileImage, {\n        profileImageUrl: myProfileImageUrl,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      })), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, myUsername), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"Points: \", myPoints), React.createElement(Divider, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, \"My Pets\"), React.createElement(\"div\", {\n        className: \"profile-image-circle-mini-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, MY_PETS.map(function (pet) {\n        return React.createElement(PetProfileImage, {\n          key: pet.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        });\n      }), React.createElement(Button, {\n        variant: \"fab\",\n        color: \"primary\",\n        onClick: this.handleAddPetBtnClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, \"+\")), React.createElement(Divider, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \"My Organizations\"), myOrgs ? React.createElement(\"div\", {\n        className: \"profile-image-circle-mini-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, myOrgs.map(function (org) {\n        return React.createElement(OrganizationButton, {\n          key: org.id,\n          organizationId: org.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        });\n      }), React.createElement(Button, {\n        variant: \"fab\",\n        color: \"primary\",\n        onClick: this.handleAddOrgBtnClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \"+\")) : React.createElement(\"img\", {\n        src: loading,\n        alt: \"loading\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return MyProfile;\n}(Component);\n\nMyProfile.displayName = \"My Profile\";\nMyProfile.propTypes = {\n  myUsername: PropTypes.string,\n  myPoints: PropTypes.number,\n  myProfileImageUrl: PropTypes.string,\n  myOrgs: PropTypes.array,\n  fetchUserData: PropTypes.func.isRequired,\n  fetchUserOrgs: PropTypes.func.isRequired\n};\nexport default MyProfile;","map":{"version":3,"sources":["/development/bigcats/pathforward-web/src/components/profile/MyProfile.jsx"],"names":["React","Component","PropTypes","banner","ProfileImage","OrganizationButton","Button","Divider","PetProfileImage","LoadingSpinner","history","ROUTE_ORGANIZATION","MY_PETS","id","MY_ORGS","MyProfile","props","fetchUserData","fetchUserOrgs","handleProfileImageClick","bind","handleAddOrgBtnClick","handleAddPetBtnClick","window","scrollTo","push","myUsername","myProfileImageUrl","myPoints","myOrgs","map","pet","org","loading","displayName","propTypes","string","number","array","func","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport banner from '../../imgs/homePageBanner.png';\nimport ProfileImage from \"./ProfileImage\";\nimport OrganizationButton from \"./OrganizationButton\";\nimport {Button, Divider} from \"muicss/react\";\nimport PetProfileImage from \"./PetProfileImage\";\nimport LoadingSpinner from \"../common/LoadingSpinner\";\nimport history from \"../../utils/history\";\nimport {ROUTE_ORGANIZATION} from \"../auth/ProtectedRoutes\";\nimport loading from '../../imgs/loading.svg';\n\n// TODO - hook this up to api once we have pet profiles\nconst MY_PETS = [\n    {id: 123},\n    {id: 321}\n];\n// TODO - hook this up to api to get organizations\nconst MY_ORGS = [\n    {id: 123}\n];\n\nclass MyProfile extends Component {\n    constructor(props) {\n        super(props);\n        const {fetchUserData, fetchUserOrgs} = props;\n        fetchUserData();\n        fetchUserOrgs();\n        //TODO - get auth0 user info on load if we no longer have it in redux store\n        this.handleProfileImageClick = this.handleProfileImageClick.bind(this);\n        this.handleAddOrgBtnClick = this.handleAddOrgBtnClick.bind(this);\n        this.handleAddPetBtnClick = this.handleAddPetBtnClick.bind(this);\n    }\n\n    componentDidMount() {\n        window.scrollTo(0, 0);\n    }\n\n    handleProfileImageClick() {\n        // TODO - edit profile image?\n    }\n\n    handleAddOrgBtnClick() {\n        history.push(ROUTE_ORGANIZATION);\n    }\n\n    handleAddPetBtnClick() {\n        // TODO - link to pet profile creation\n    }\n\n    render() {\n        const {myUsername, myProfileImageUrl, myPoints, myOrgs} = this.props;\n\n        if (!myUsername || (!myPoints && myPoints !== 0)) {\n            // TODO - implement loading spinner\n            return <LoadingSpinner />;\n        }\n        return (\n            <div>\n                <header className=\"MyProfile-header\">\n                    <img src={banner} className=\"home-banner\" alt=\"logo\" onClick={this.handleProfileImageClick} />\n                </header>\n                <div className={\"profile-image-button-container\"}>\n                    <ProfileImage profileImageUrl={myProfileImageUrl} />\n                </div>\n                <h1>{myUsername}</h1>\n                <h3>Points: {myPoints}</h3>\n                <Divider/>\n                    <h2>My Pets</h2>\n                <div className=\"profile-image-circle-mini-container\">\n                    {MY_PETS.map((pet) => <PetProfileImage key={pet.id}/>)}\n                    <Button variant=\"fab\" color=\"primary\" onClick={this.handleAddPetBtnClick}>+</Button>\n                </div>\n                <Divider/>\n                <h2>My Organizations</h2>\n                {myOrgs\n                    ? <div className=\"profile-image-circle-mini-container\">\n                        {myOrgs.map((org) => <OrganizationButton key={org.id} organizationId={org.id}/>)}\n                        <Button variant=\"fab\" color=\"primary\" onClick={this.handleAddOrgBtnClick}>+</Button>\n                    </div>\n                    : <img src={loading} alt=\"loading\"/>\n                }\n            </div>\n        );\n    }\n}\n\nMyProfile.displayName = \"My Profile\";\nMyProfile.propTypes = {\n    myUsername: PropTypes.string,\n    myPoints: PropTypes.number,\n    myProfileImageUrl: PropTypes.string,\n    myOrgs: PropTypes.array,\n    fetchUserData: PropTypes.func.isRequired,\n    fetchUserOrgs: PropTypes.func.isRequired\n};\n\nexport default MyProfile;\n"]},"metadata":{},"sourceType":"module"}